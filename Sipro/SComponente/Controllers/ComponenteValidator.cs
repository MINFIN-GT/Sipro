using System;
using FluentValidation;
using Newtonsoft.Json.Linq;
using Utilities;

namespace SComponente.Controllers
{
    /// <summary>
    /// A class which represents the ComponenteValidator.
	/// Generated by SIPRO TEAM. May 2018. 
    /// </summary>

	public class ComponenteValidator : AbstractValidator<JObject>
	{
		public ComponenteValidator() 
		{
			//RuleFor(componente => componente["id"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'id' to type " + typeof(Int32));
			RuleFor(componente => componente["nombre"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'nombre' to type " + typeof(String)).MaximumLength(1000);
			RuleFor(componente => componente["descripcion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'descripcion' to type " + typeof(String)).MaximumLength(4000);
			RuleFor(componente => componente["proyectoid"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'proyectoid' to type " + typeof(Int32));
			RuleFor(componente => componente["componenteTipoid"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'componenteTipoid' to type " + typeof(Int32));
			//RuleFor(componente => componente["usuarioCreo"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'usuarioCreo' to type " + typeof(String)).MaximumLength(30);
			//RuleFor(componente => componente["usuarioActualizo"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'usuarioActualizo' to type " + typeof(String)).MaximumLength(30);
			//RuleFor(componente => componente["fechaCreacion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(DateTime)); }).WithMessage("Error when trying to parse the property 'fechaCreacion' to type " + typeof(DateTime));
			//RuleFor(componente => componente["fechaActualizacion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(DateTime)); }).WithMessage("Error when trying to parse the property 'fechaActualizacion' to type " + typeof(DateTime));
			//RuleFor(componente => componente["estado"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'estado' to type " + typeof(Int32));
			RuleFor(componente => componente["ueunidadEjecutora"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'ueunidadEjecutora' to type " + typeof(Int32));
			RuleFor(componente => componente["snip"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'snip' to type " + typeof(Int32));
			RuleFor(componente => componente["programa"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'programa' to type " + typeof(Int32));
			RuleFor(componente => componente["subprograma"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'subprograma' to type " + typeof(Int32));
			RuleFor(componente => componente["proyecto"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'proyecto' to type " + typeof(Int32));
			RuleFor(componente => componente["actividad"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'actividad' to type " + typeof(Int32));
			RuleFor(componente => componente["obra"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'obra' to type " + typeof(Int32));
			RuleFor(componente => componente["latitud"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'latitud' to type " + typeof(String)).MaximumLength(30);
			RuleFor(componente => componente["longitud"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'longitud' to type " + typeof(String)).MaximumLength(30);
			RuleFor(componente => componente["costo"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(decimal)); }).WithMessage("Error when trying to parse the property 'costo' to type " + typeof(decimal));
			RuleFor(componente => componente["acumulacionCostoid"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int64)); }).WithMessage("Error when trying to parse the property 'acumulacionCostoid' to type " + typeof(Int64));
			RuleFor(componente => componente["renglon"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'renglon' to type " + typeof(Int32));
			RuleFor(componente => componente["ubicacionGeografica"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'ubicacionGeografica' to type " + typeof(Int32));
			RuleFor(componente => componente["fechaInicio"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(DateTime)); }).WithMessage("Error when trying to parse the property 'fechaInicio' to type " + typeof(DateTime));
			RuleFor(componente => componente["fechaFin"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(DateTime)); }).WithMessage("Error when trying to parse the property 'fechaFin' to type " + typeof(DateTime));
			RuleFor(componente => componente["duracion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'duracion' to type " + typeof(Int32));
			RuleFor(componente => componente["duracionDimension"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'duracionDimension' to type " + typeof(String)).MaximumLength(1);
			//RuleFor(componente => componente["orden"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'orden' to type " + typeof(Int32));
			//RuleFor(componente => componente["treepath"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(String)); }).WithMessage("Error when trying to parse the property 'treepath' to type " + typeof(String)).MaximumLength(1000);
			//RuleFor(componente => componente["nivel"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'nivel' to type " + typeof(Int32));
			RuleFor(componente => componente["ejercicio"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'ejercicio' to type " + typeof(Int32));
			RuleFor(componente => componente["entidad"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'entidad' to type " + typeof(Int32));
			RuleFor(componente => componente["esDeSigade"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'esDeSigade' to type " + typeof(Int32));
			RuleFor(componente => componente["fuentePrestamo"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(decimal)); }).WithMessage("Error when trying to parse the property 'fuentePrestamo' to type " + typeof(decimal));
			RuleFor(componente => componente["fuenteDonacion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(decimal)); }).WithMessage("Error when trying to parse the property 'fuenteDonacion' to type " + typeof(decimal));
			RuleFor(componente => componente["fuenteNacional"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(decimal)); }).WithMessage("Error when trying to parse the property 'fuenteNacional' to type " + typeof(decimal));
			RuleFor(componente => componente["componenteSigadeid"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'componenteSigadeid' to type " + typeof(Int32));
			RuleFor(componente => componente["fechaInicioReal"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(DateTime)); }).WithMessage("Error when trying to parse the property 'fechaInicioReal' to type " + typeof(DateTime));
			RuleFor(componente => componente["fechaFinReal"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(DateTime)); }).WithMessage("Error when trying to parse the property 'fechaFinReal' to type " + typeof(DateTime));
			RuleFor(componente => componente["inversionNueva"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must(componente => { return GenericValidatorType.ValidateType(componente, typeof(Int32)); }).WithMessage("Error when trying to parse the property 'inversionNueva' to type " + typeof(Int32));
			
		}
	}
}
