using System;
using FluentValidation;
using Newtonsoft.Json.Linq;
using Utilities;

namespace SCooperante.Controllers
{
    /// <summary>
    /// A class which represents the CooperanteValidator.
	/// Generated by SIPRO TEAM. May 2018. 
    /// </summary>

	public class CooperanteValidator : AbstractValidator<JObject>
	{
		public CooperanteValidator() 
		{
			RuleFor(cooperante => cooperante["codigo"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((cooperante, type) => { return GenericValidatorType.ValidateType(cooperante["codigo"].ToString(), typeof(Int32)); });
			RuleFor(cooperante => cooperante["siglas"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((cooperante, type) => { return GenericValidatorType.ValidateType(cooperante["siglas"].ToString(), typeof(String)); }).MaximumLength(45);
			RuleFor(cooperante => cooperante["nombre"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((cooperante, type) => { return GenericValidatorType.ValidateType(cooperante["nombre"].ToString(), typeof(String)); }).MaximumLength(1000);
			RuleFor(cooperante => cooperante["descripcion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((cooperante, type) => { return GenericValidatorType.ValidateType(cooperante["descripcion"].ToString(), typeof(String)); }).MaximumLength(4000);
			RuleFor(cooperante => cooperante["ejercicio"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((cooperante, type) => { return GenericValidatorType.ValidateType(cooperante["ejercicio"].ToString(), typeof(Int32)); });
			
		}
	}
}
