using System;
using FluentValidation;
using Newtonsoft.Json.Linq;
using Utilities;

namespace SProyecto.Controllers
{
    /// <summary>
    /// A class which represents the ProyectoValidator.
	/// Generated by SIPRO TEAM. May 2018. 
    /// </summary>

	public class ProyectoValidator : AbstractValidator<JObject>
	{
		public ProyectoValidator() 
		{
			//RuleFor(proyecto => proyecto["id"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["id"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["nombre"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["nombre"].ToString(), typeof(String)); }).MaximumLength(2000);
			RuleFor(proyecto => proyecto["descripcion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["descripcion"].ToString(), typeof(String)); }).MaximumLength(4000);
			//RuleFor(proyecto => proyecto["estado"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["estado"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["proyectoTipoid"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["proyectoTipoid"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["ueunidadEjecutora"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["ueunidadEjecutora"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["snip"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["snip"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["programa"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["programa"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["subprograma"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["subprograma"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["proyecto"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["proyecto"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["actividad"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["actividad"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["obra"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["obra"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["latitud"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["latitud"].ToString(), typeof(String)); }).MaximumLength(30);
			//RuleFor(proyecto => proyecto["longitud"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["longitud"].ToString(), typeof(String)); }).MaximumLength(30);
			RuleFor(proyecto => proyecto["objetivo"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["objetivo"].ToString(), typeof(String)); }).MaximumLength(4000);
			RuleFor(proyecto => proyecto["directorProyecto"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["directorProyecto"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["enunciadoAlcance"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["enunciadoAlcance"].ToString(), typeof(String)); }).MaximumLength(4000);
			//RuleFor(proyecto => proyecto["costo"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["costo"].ToString(), typeof(decimal)); });
			//RuleFor(proyecto => proyecto["acumulacionCostoid"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["acumulacionCostoid"].ToString(), typeof(Int64)); });
			RuleFor(proyecto => proyecto["objetivoEspecifico"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["objetivoEspecifico"].ToString(), typeof(String)); }).MaximumLength(4000);
			RuleFor(proyecto => proyecto["visionGeneral"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["visionGeneral"].ToString(), typeof(String)); }).MaximumLength(45);
			//RuleFor(proyecto => proyecto["renglon"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["renglon"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["ubicacionGeografica"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["ubicacionGeografica"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["fechaInicio"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["fechaInicio"].ToString(), typeof(DateTime)); });
			//RuleFor(proyecto => proyecto["fechaFin"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["fechaFin"].ToString(), typeof(DateTime)); });
			//RuleFor(proyecto => proyecto["duracion"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["duracion"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["duracionDimension"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["duracionDimension"].ToString(), typeof(String)); }).MaximumLength(1);
			//RuleFor(proyecto => proyecto["orden"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["orden"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["treepath"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["treepath"].ToString(), typeof(String)); }).MaximumLength(1000);
			//RuleFor(proyecto => proyecto["nivel"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["nivel"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["ejercicio"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["ejercicio"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["entidad"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["entidad"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["ejecucionFisicaReal"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["ejecucionFisicaReal"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["proyectoClase"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).NotEmpty().Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["proyectoClase"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["projectCargado"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["projectCargado"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["prestamoid"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["prestamoid"].ToString(), typeof(Int32)); });
			RuleFor(proyecto => proyecto["observaciones"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["observaciones"].ToString(), typeof(String)); }).MaximumLength(2000);
			RuleFor(proyecto => proyecto["coordinador"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["coordinador"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["fechaElegibilidad"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["fechaElegibilidad"].ToString(), typeof(DateTime)); });
			//RuleFor(proyecto => proyecto["fechaInicioReal"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["fechaInicioReal"].ToString(), typeof(DateTime)); });
			//RuleFor(proyecto => proyecto["fechaFinReal"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["fechaFinReal"].ToString(), typeof(DateTime)); });
			//RuleFor(proyecto => proyecto["congelado"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["congelado"].ToString(), typeof(Int32)); });
			//RuleFor(proyecto => proyecto["fechaCierre"].ToString()).Cascade(CascadeMode.StopOnFirstFailure).Must((proyecto, type) => { return GenericValidatorType.ValidateType(proyecto["fechaCierre"].ToString(), typeof(DateTime)); });
			
		}
	}
}
